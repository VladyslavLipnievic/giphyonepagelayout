[{"C:\\Users\\Bug\\giphyonepagelayout\\src\\index.js":"1","C:\\Users\\Bug\\giphyonepagelayout\\src\\reportWebVitals.js":"2","C:\\Users\\Bug\\giphyonepagelayout\\src\\App.js":"3","C:\\Users\\Bug\\giphyonepagelayout\\src\\components\\GetGiphy.js":"4"},{"size":500,"mtime":1612432571873,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":253,"mtime":1612462265126,"results":"8","hashOfConfig":"6"},{"size":3764,"mtime":1612601809057,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"565xt0",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"C:\\Users\\Bug\\giphyonepagelayout\\src\\index.js",[],["21","22"],"C:\\Users\\Bug\\giphyonepagelayout\\src\\reportWebVitals.js",[],"C:\\Users\\Bug\\giphyonepagelayout\\src\\App.js",["23"],"import React, { Component } from \"react\";\nimport \"./App.scss\";\n\nimport GetGiphy from \"./components/GetGiphy\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <GetGiphy />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\Bug\\giphyonepagelayout\\src\\components\\GetGiphy.js",["24","25"],"import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport default class GetGiphy extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      GiphyData: [],\r\n      limit: 6,\r\n      showModal: false,\r\n      caption: \"\",\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleScroll = this.handleScroll.bind(this);\r\n    this.refVal = React.createRef();\r\n  }\r\n\r\n  enlargeImg(img) {\r\n    img.style.width = \"300px\";\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"scroll\", this.handleScroll);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"scroll\", this.handleScroll);\r\n  }\r\n\r\n  handleScroll(event) {\r\n    if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\r\n      console.log(\"you're at the bottom of the page\");\r\n      this.setState({ limit: this.state.limit + 12 });\r\n      // this.handleInfinite();\r\n      // console.log(this.refVal.current.value);\r\n      // console.log(this.state.value);\r\n      this.handleInfinite();\r\n    }\r\n  }\r\n\r\n  async handleInfinite() {\r\n    // console.log(selector);\r\n    // this.setState({ value: event.target.value });\r\n    let url = `https://api.giphy.com/v1/gifs/search?api_key=wBxZoI7BPYUSn1LFBwKtwFTdqfjYjI8r&q=${this.refVal.current.value}&limit=${this.state.limit}`;\r\n\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    this.setState({\r\n      GiphyData: data.data,\r\n      loading: true,\r\n    });\r\n  }\r\n\r\n  async handleChange(event) {\r\n    this.setState({ value: event.target.value });\r\n    // console.log(event.target.value);\r\n    let url = `https://api.giphy.com/v1/gifs/search?api_key=wBxZoI7BPYUSn1LFBwKtwFTdqfjYjI8r&q=${event.target.value}&limit=${this.state.limit}`;\r\n\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    this.setState({\r\n      GiphyData: data.data,\r\n      loading: true,\r\n      value: event.target.value,\r\n    });\r\n    // console.log(this.state.value);\r\n  }\r\n  updateField(event) {\r\n    if (\r\n      (event.charCode >= 0 && event.charCode <= 47) ||\r\n      (event.charCode >= 58 && event.charCode <= 64) ||\r\n      (event.charCode >= 91 && event.charCode <= 96) ||\r\n      (event.charCode >= 123 && event.charCode <= 126)\r\n    ) {\r\n      event.preventDefault();\r\n    }\r\n    this.setState({ limit: 12 });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form>\r\n          <label>\r\n            Search :\r\n            <input\r\n              type=\"text\"\r\n              className=\"searchGif\"\r\n              onKeyPress={(event) => this.updateField(event)}\r\n              ref={this.refVal}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n        </form>\r\n\r\n        <div>\r\n          {this.state.GiphyData.map((GifData) => (\r\n            <img\r\n              className=\"w-25 p-10\"\r\n              key={GifData.id}\r\n              src={GifData.images.fixed_height_downsampled.webp}\r\n              onClick={() => {\r\n                this.setState({\r\n                  showModal: true,\r\n\r\n                  modalSrc: GifData.images.downsized_medium.url,\r\n                });\r\n              }}\r\n            />\r\n          ))}{\" \"}\r\n          <div\r\n            id=\"myModal\"\r\n            className=\"modal\"\r\n            style={{ display: this.state.showModal ? \"block\" : \"none\" }}\r\n          >\r\n            <div>\r\n              <span\r\n                className=\"close\"\r\n                onClick={() => this.setState({ showModal: false })}\r\n              >\r\n                &times;\r\n              </span>\r\n              <img className=\"w-50 h-50\" src={this.state.modalSrc} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":1,"column":17,"nodeType":"32","messageId":"33","endLine":1,"endColumn":26},{"ruleId":"34","severity":1,"message":"35","line":101,"column":13,"nodeType":"36","endLine":112,"endColumn":15},{"ruleId":"34","severity":1,"message":"35","line":126,"column":15,"nodeType":"36","endLine":126,"endColumn":70},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]